library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity lcd is

--GENERIC(Num_Hex_Digits: integer := 4);

port(clk, reset: 										 in std_logic;
	  SF_D: 												 out std_logic_vector(3 downto 0);
	  LCD_E, LCD_RS, LCD_RW:                   out std_logic;
	  character_0, character_1, character_2:   in std_logic_vector(7 downto 0);
	  character_3, character_4, character_5:   in std_logic_vector(7 downto 0);
	  character_6, character_7, character_8:   in std_logic_vector(7 downto 0);
	  character_9, character_10, character_11: in std_logic_vector(7 downto 0);
	  value_counter : in integer range -20 to 20);
end lcd;

architecture behavior of lcd is

signal tempCount : integer range 0 to 100000 ;

signal indic : std_logic := '0';
type tx_sequence is (high_setup, high_hold, oneus, low_setup, low_hold, fortyus, done);
signal tx_state : tx_sequence := done;
signal tx_byte : std_logic_vector(7 downto 0);
signal tx_init : std_logic := '0';

type init_sequence is (idle, fifteenms, one, two, three, four, five, six, seven, eight, done);
signal init_state : init_sequence := idle;
signal init_init, init_done : std_logic := '0';

signal i : integer range 0 to 750000 := 0;
signal i2 : integer range 0 to 2000 := 0;
signal i3 : integer range 0 to 82000 := 0;
signal i10: integer range 0 to 250000000 := 0;
signal i20: integer range 0 to 16:=0;

signal SF_D0, SF_D1 : std_logic_vector(3 downto 0);
signal LCD_E0, LCD_E1 : std_logic;
signal mux : std_logic;

type display_state is (init, function_set, entry_set, set_display, clr_display, pause, cur_shift, ret_home, set_addr, char_0, char_1, char_2, char_3, 
								char_4, char_5, char_6, char_7, char_8, char_9, char_10, char_11, char_12, char_13, char_14, char_15, char_16, done);

signal cur_state : display_state := init; 

signal value_0, value_1, value_2, value_3 : std_logic_vector(7 downto 0);
--signal character_0, character_1, character_2 : std_logic_vector(7 downto 0);


begin

  Display_LCD: process(clk, Value_0, Value_1, Value_2, Value_3)
  begin
	if clk'event and clk = '1' then
		if value_counter = 0 then
			Value_0 <= X"20";
			Value_1 <= X"30";
			Value_2 <= X"2E";
			Value_3 <= X"35";
		elsif value_counter = 1 then 
			Value_0 <= X"20";
			Value_1 <= X"31";
			Value_2 <= X"2E";
			Value_3 <= X"30";
		elsif value_counter = 2 then 
			Value_0 <= X"20";
			Value_1 <= X"31";
			Value_2 <= X"2E";
			Value_3 <= X"35";
		elsif value_counter = 3 then 
			Value_0 <= X"20";
			Value_1 <= X"32";
			Value_2 <= X"2E";
			Value_3 <= X"30";
		elsif value_counter = 4 then 
			Value_0 <= X"20";
			Value_1 <= X"32";
			Value_2 <= X"2E";
			Value_3 <= X"35";
		elsif value_counter = 5 then 
			Value_0 <= X"20";
			Value_1 <= X"33";
			Value_2 <= X"2E";
			Value_3 <= X"30";
		elsif value_counter = 6 then 
			Value_0 <= X"20";
			Value_1 <= X"33";
			Value_2 <= X"2E";
			Value_3 <= X"35";
		elsif value_counter = 7 then 
			Value_0 <= X"20";
			Value_1 <= X"34";
			Value_2 <= X"2E";
			Value_3 <= X"30";
		elsif value_counter = 8 then 
			Value_0 <= X"20";
			Value_1 <= X"34";
			Value_2 <= X"2E";
			Value_3 <= X"35";
		elsif value_counter = 9 then 
			Value_0 <= X"20";
			Value_1 <= X"35";
			Value_2 <= X"2E";
			Value_3 <= X"30";
		elsif value_counter = 10 then 
			Value_0 <= X"20";
			Value_1 <= X"35";
			Value_2 <= X"2E";
			Value_3 <= X"35";
		elsif value_counter = 11 then 
			Value_0 <= X"20";
			Value_1 <= X"36";
			Value_2 <= X"2E";
			Value_3 <= X"30";
		elsif value_counter = 12 then 
			Value_0 <= X"20";
			Value_1 <= X"36";
			Value_2 <= X"2E";
			Value_3 <= X"35";
		elsif value_counter = 13 then 
			Value_0 <= X"20";
			Value_1 <= X"37";
			Value_2 <= X"2E";
			Value_3 <= X"30";
		elsif value_counter = 14 then 
			Value_0 <= X"20";
			Value_1 <= X"37";
			Value_2 <= X"2E";
			Value_3 <= X"35";
		elsif value_counter = 15 then 
			Value_0 <= X"20";
			Value_1 <= X"38";
			Value_2 <= X"2E";
			Value_3 <= X"30";
		elsif value_counter = 16 then 
			Value_0 <= X"20";
			Value_1 <= X"38";
			Value_2 <= X"2E";
			Value_3 <= X"35";
		elsif value_counter = 17 then 
			Value_0 <= X"20";
			Value_1 <= X"39";
			Value_2 <= X"2E";
			Value_3 <= X"30";
		elsif value_counter = 18 then 
			Value_0 <= X"20";
			Value_1 <= X"39";
			Value_2 <= X"2E";
			Value_3 <= X"35";
		elsif value_counter = 19 then 
			Value_0 <= X"31";
			Value_1 <= X"30";
			Value_2 <= X"2E";
			Value_3 <= X"30";			
		elsif value_counter = 20 then 
			Value_0 <= X"31";
			Value_1 <= X"30";
			Value_2 <= X"2E";
			Value_3 <= X"35";
		elsif value_counter = 21 then 
			Value_0 <= X"31";
			Value_1 <= X"31";
			Value_2 <= X"2E";
			Value_3 <= X"30";
		elsif value_counter = 22 then 
			Value_0 <= X"31";
			Value_1 <= X"31";
			Value_2 <= X"2E";
			Value_3 <= X"35";
		elsif value_counter = 23 then 
			Value_0 <= X"31";
			Value_1 <= X"32";
			Value_2 <= X"2E";
			Value_3 <= X"30";
		elsif value_counter = 24 then 
			Value_0 <= X"31";
			Value_1 <= X"32";
			Value_2 <= X"2E";
			Value_3 <= X"35";
		elsif value_counter = 25 then 
			Value_0 <= X"31";
			Value_1 <= X"33";
			Value_2 <= X"2E";
			Value_3 <= X"30";
		elsif value_counter = 26 then 
			Value_0 <= X"31";
			Value_1 <= X"33";
			Value_2 <= X"2E";
			Value_3 <= X"35";
		elsif value_counter = 27 then 
			Value_0 <= X"31";
			Value_1 <= X"34";
			Value_2 <= X"2E";
			Value_3 <= X"30";
		elsif value_counter = 28 then 
			Value_0 <= X"31";
			Value_1 <= X"34";
			Value_2 <= X"2E";
			Value_3 <= X"35";
		elsif value_counter = 29 then 
			Value_0 <= X"31";
			Value_1 <= X"35";
			Value_2 <= X"2E";
			Value_3 <= X"30";
		elsif value_counter = 30 then 
			Value_0 <= X"31";
			Value_1 <= X"35";
			Value_2 <= X"2E";
			Value_3 <= X"35";
		elsif value_counter = 31 then 
			Value_0 <= X"31";
			Value_1 <= X"36";
			Value_2 <= X"2E";
			Value_3 <= X"30";
		elsif value_counter = 32 then 
			Value_0 <= X"31";
			Value_1 <= X"36";
			Value_2 <= X"2E";
			Value_3 <= X"35";
		elsif value_counter = 33 then 
			Value_0 <= X"31";
			Value_1 <= X"37";
			Value_2 <= X"2E";
			Value_3 <= X"30";
		elsif value_counter = 34 then 
			Value_0 <= X"31";
			Value_1 <= X"37";
			Value_2 <= X"2E";
			Value_3 <= X"35";
		elsif value_counter = 35 then 
			Value_0 <= X"31";
			Value_1 <= X"38";
			Value_2 <= X"2E";
			Value_3 <= X"30";
		elsif value_counter = 36 then 
			Value_0 <= X"31";
			Value_1 <= X"38";
			Value_2 <= X"2E";
			Value_3 <= X"35";
		elsif value_counter = 37 then 
			Value_0 <= X"31";
			Value_1 <= X"39";
			Value_2 <= X"2E";
			Value_3 <= X"30";
		elsif value_counter = 38 then 
			Value_0 <= X"31";
			Value_1 <= X"39";
			Value_2 <= X"2E";
			Value_3 <= X"35";
		elsif value_counter = 39 then 
			Value_0 <= X"32";
			Value_1 <= X"31";
			Value_2 <= X"2E";
			Value_3 <= X"30";
		elsif value_counter <= -1 then 
			Value_0 <= X"20";
			Value_1 <= X"4D";
			Value_2 <= X"49";
			Value_3 <= X"4E";
		elsif value_counter >= 40 then
			Value_0 <= X"20";
			Value_1 <= X"4D";
			Value_2 <= X"41";
			Value_3 <= X"58";
		end if;
	end if;
end process;


LCD_RW <= '0'; --write only

--The following "with" statements simplify the process of adding and removing states.

--when to transmit a command/data and when not to
with cur_state select
	tx_init <= '0' when init | pause | done, 
	'1' when others;

--control the bus
with cur_state select
	mux <= '1' when init,
	'0' when others;

--control the initialization sequence
with cur_state select
	init_init <= '1' when init,
	'0' when others;

--register select
with cur_state select
	LCD_RS <= '0' when function_set|entry_set|set_display|clr_display|set_addr|cur_shift|ret_home, --cur_shift before ret_home
	'1' when others;

--what byte to transmit to lcd
--refer to datasheet for an explanation of these values    --UPPER + LOWER NIBBLE
with cur_state select
	tx_byte <= "00101000" when function_set,
	"00000110" when entry_set,
	"00001100" when set_display,
	"00000001" when clr_display,
	"10000000" when set_addr,
	Character_0 when char_0,
	Character_1 when char_1,
	Character_2 when char_2,
	Character_3 when char_3,
	Character_4 when char_4,
	Character_5 when char_5,
	Character_6 when char_6,
	Character_7 when char_7,
	Character_8 when char_8,
	Character_9 when char_9,
	Value_0 when char_10,
	Value_1 when char_11,
	Value_2 when char_12,
	Value_3 when char_13, 
	Character_10 when char_14,
	Character_11 when char_15,
	"00000010" when ret_home,
	"00010000" when cur_shift,
	"00000000" when others;

--main state machine
display: process(clk, reset)
	begin
		if(reset='1') then
		cur_state <= function_set;
		elsif(clk='1' and clk'event) then
		case cur_state is
		--refer to intialize state machine below
		when init =>
		if(init_done = '1') then
		cur_state <= function_set;
		else
		cur_state <= init;
		end if;

--every other state but pause uses the transmit state machine
when function_set =>
		if(i2 = 1000) then --2000
		cur_state <= entry_set;
		else
		cur_state <= function_set;
		end if; 

when entry_set =>
		if(i2 = 1000) then --2000
		cur_state <= set_display;
		else
		cur_state <= entry_set;
		end if;

when set_display =>
		if(i2 = 1000) then --2000
		cur_state <= clr_display;
		else
		cur_state <= set_display;
		end if;

when clr_display =>
		i3 <= 0;
		if(i2 = 1000) then --2000
		cur_state <= pause; --pause
		else
		cur_state <= clr_display;
		end if;

when pause =>
		if(i3 = 1000) then --82000
		cur_state <= set_addr;
		i3 <= 0;
		else
		cur_state <= pause;
		i3 <= i3 + 1;
		end if;

when set_addr =>
		if(i2 = 1000) then --2000
		cur_state <= char_0;
		else
		cur_state <= set_addr;
		end if;

when char_0 =>
		if(i2 = 1000) then
		cur_state <= char_1;
		indic <= '1';
		else
		cur_state <= char_0;
		end if;

when char_1 =>
		if(i2 = 1000) then
		cur_state <= char_2;
		else
		cur_state <= char_1;
		end if;
		
when char_2 =>
		if(i2 = 1000) then
		cur_state <= char_3;
		indic <= '1';
		else
		cur_state <= char_2;
		end if;

when char_3 =>
		if(i2 = 1000) then
		cur_state <= char_4;
		else
		cur_state <= char_3;
		end if;
		
when char_4 =>
		if(i2 = 1000) then
		cur_state <= char_5;
		indic <= '1';
		else
		cur_state <= char_4;
		end if;
		
when char_5 =>
		if(i2 = 1000) then
		cur_state <= char_6;
		indic <= '1';
		else
		cur_state <= char_5;
		end if;
		
when char_6 =>
		if(i2 = 1000) then
		cur_state <= char_7;
		indic <= '1';
		else
		cur_state <= char_6;
		end if;

--when char_6 =>
--		if(i2 = 1000) then
--		if indic = '1' then
--		cur_state <= char_7;
--		elsif indic = '0' then
--		cur_state <= cur_shift; --cur_shift
--		end if;
--		else
--		cur_state <= char_6;
--		end if;

when char_7 =>
		if(i2 = 1000) then
		cur_state <= char_8; --Ive changed it here (char_m) cur_shift
		indic <= '0';
		else
		cur_state <= char_7;
		end if;
		
when char_8 =>
		if(i2 = 1000) then
		cur_state <= char_9; --Ive changed it here (char_m) cur_shift
		indic <= '0';
		else
		cur_state <= char_8;
		end if;
		
when char_9 =>
		if(i2 = 1000) then
		cur_state <= char_10; --Ive changed it here (char_m) cur_shift
		indic <= '0';
		else
		cur_state <= char_9;
		end if;
		
when char_10 =>
		if(i2 = 1000) then
		cur_state <= char_11; --Ive changed it here (char_m) cur_shift
		indic <= '0';
		else
		cur_state <= char_10;
		end if;
		
when char_11 =>
		if(i2 = 1000) then
		cur_state <= char_12; --Ive changed it here (char_m) cur_shift
		indic <= '0';
		else
		cur_state <= char_11;
		end if;
		
when char_12 =>
		if(i2 = 1000) then
		cur_state <= char_13; --Ive changed it here (char_m) cur_shift
		indic <= '0';
		else
		cur_state <= char_12;
		end if;
		
when char_13 =>
		if(i2 = 1000) then
		cur_state <= char_14; --Ive changed it here (char_m) cur_shift
		indic <= '0';
		else
		cur_state <= char_13;
		end if;
		
when char_14 =>
		if(i2 = 1000) then
		cur_state <= char_15; --Ive changed it here (char_m) cur_shift
		indic <= '0';
		else
		cur_state <= char_14;
		end if;
		
when char_15 =>
		if(i2 = 1000) then
		cur_state <= char_16; --Ive changed it here (char_m) cur_shift
		indic <= '0';
		else
		cur_state <= char_15;
		end if;
		
when char_16 =>
		if(i2 = 1000) then
		cur_state <= cur_shift; --Ive changed it here (char_m) cur_shift
		indic <= '0';
		else
		cur_state <= char_16;
		end if;

when cur_shift =>
		if (i2 = 1000) then
		cur_state <= done;
		else
		cur_state <= cur_shift;
		end if;    
   
when done =>
		if(i10 = 100000) then  --25000000
		if(i20 = 15) then
		cur_state <= ret_home;
		i20 <= 0;
		else
		cur_state <= cur_shift; --cur_shift
		i20 <= i20 + 1;
		end if;
		i10 <= 0;
		else
		cur_state <= done;
		i10 <= i10 + 1;
		end if;

when ret_home =>
		if(i2 = 1000) then
		cur_state <= set_addr;
		else
		cur_state <= ret_home;
		end if;
 
end case;
end if;
end process display;

with mux select
		SF_D <= SF_D0 when '0', --transmit
		SF_D1 when others; --initialize
		with mux select
		LCD_E <= LCD_E0 when '0', --transmit
		LCD_E1 when others; --initialize

--specified by datasheet
transmit : process(clk, reset, tx_init)
	begin
		if(reset='1') then
		tx_state <= done;
		elsif(clk='1' and clk'event) then
		case tx_state is
		when high_setup => --40ns
		LCD_E0 <= '0';
		SF_D0 <= tx_byte(7 downto 4);
		if(i2 = 2) then
		tx_state <= high_hold;
		i2 <= 0;
		else
		tx_state <= high_setup;
		i2 <= i2 + 1;
		end if;

when high_hold => --230ns
		LCD_E0 <= '1';
		SF_D0 <= tx_byte(7 downto 4);
		if(i2 = 12) then
		tx_state <= oneus;
		i2 <= 0;
		else
		tx_state <= high_hold;
		i2 <= i2 + 1;
		end if;

when oneus =>
		LCD_E0 <= '0';
		if(i2 = 50) then
		tx_state <= low_setup;
		i2 <= 0;
		else
		tx_state <= oneus;
		i2 <= i2 + 1;
		end if;

when low_setup =>
		LCD_E0 <= '0';
		SF_D0 <= tx_byte(3 downto 0);
		if(i2 = 2) then
		tx_state <= low_hold;
		i2 <= 0;
		else
		tx_state <= low_setup;
		i2 <= i2 + 1;
		end if;

when low_hold =>
		LCD_E0 <= '1';
		SF_D0 <= tx_byte(3 downto 0);
		if(i2 = 12) then
		tx_state <= fortyus;
		i2 <= 0;
		else
		tx_state <= low_hold;
		i2 <= i2 + 1;
		end if;

when fortyus =>
		LCD_E0 <= '0';
		if(i2 = 2000) then
		tx_state <= done;
		i2 <= 0;
		else
		tx_state <= fortyus;
		i2 <= i2 + 1;
		end if;

when done =>
		LCD_E0 <= '0';
		if(tx_init = '1') then
		tx_state <= high_setup;
		i2 <= 0;
		else
		tx_state <= done;
		i2 <= 0;
		end if;

end case;
end if;
end process transmit;

--specified by datasheet
power_on_initialize: process(clk, reset, init_init) --power on initialization sequence
	begin
		if(reset='1') then
		init_state <= idle;
		init_done <= '0';
		elsif(clk='1' and clk'event) then
		case init_state is
		when idle => 
		init_done <= '0';
		if(init_init = '1') then
		init_state <= fifteenms;
		i <= 0;
		else
		init_state <= idle;
		i <= i + 1;
		end if;

when fifteenms =>
		init_done <= '0';
		if(i = 750000) then
		init_state <= one;
		i <= 0;
		else
		init_state <= fifteenms;
		i <= i + 1;
		end if;

when one =>
		SF_D1 <= "0011";
		LCD_E1 <= '1';
		init_done <= '0';
		if(i = 11) then
		init_state<=two;
		i <= 0;
		else
		init_state<=one;
		i <= i + 1;
		end if;

when two =>
		LCD_E1 <= '0';
		init_done <= '0';
		if(i = 205000) then
		init_state<=three;
		i <= 0;
		else
		init_state<=two;
		i <= i + 1;
		end if;

when three =>
		SF_D1 <= "0011";
		LCD_E1 <= '1';
		init_done <= '0';
		if(i = 11) then 
		init_state<=four;
		i <= 0;
		else
		init_state<=three;
		i <= i + 1;
		end if;

when four =>
		LCD_E1 <= '0';
		init_done <= '0';
		if(i = 5000) then
		init_state<=five;
		i <= 0;
		else
		init_state<=four;
		i <= i + 1;
		end if;

when five =>
		SF_D1 <= "0011";
		LCD_E1 <= '1';
		init_done <= '0';
		if(i = 11) then
		init_state<=six;
		i <= 0;
		else
		init_state<=five;
		i <= i + 1;
		end if;

when six =>
		LCD_E1 <= '0';
		init_done <= '0';
		if(i = 2000) then
		init_state<=seven;
		i <= 0;
		else
		init_state<=six;
		i <= i + 1;
		end if;

when seven =>
		SF_D1 <= "0010";
		LCD_E1 <= '1';
		init_done <= '0';
		if(i = 11) then
		init_state<=eight;
		i <= 0;
		else
		init_state<=seven;
		i <= i + 1;
		end if;

when eight =>
		LCD_E1 <= '0';
		init_done <= '0';
		if(i = 2000) then
		init_state<=done;
		i <= 0;
		else
		init_state<=eight;
		i <= i + 1;
		end if;

when done =>
		init_state <= done;
		init_done <= '1';

end case;

end if;
end process power_on_initialize;



end behavior;
